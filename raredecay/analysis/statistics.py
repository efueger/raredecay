# -*- coding: utf-8 -*-
"""
Created on Thu Oct 20 20:00:33 2016

@author: Jonas Eschle 'Mayou36'
"""


import sys
import argparse
import ROOT
from ROOT import TFile, TLorentzVector, TVector3, TRotation, TLorentzRotation, TMath, TH1D, TCanvas, TH2D, TObject, TF1, TH1F, gStyle, TF2, TF3, TF12, TFormula
from ROOT import RooRealVar, RooFormulaVar, RooArgList, RooArgSet, RooLegendre, RooProdPdf, RooPolynomial, RooAddPdf, RooPlot, RooProduct, RooDataSet, RooKeysPdf
from ROOT import RooFit, RooCBShape, RooGaussian, RooExponential, RooChebychev
import ROOT
from itertools import repeat
import itertools as it
import os.path
import numpy as np
from array import array
from root_numpy import array2tree

from raredecay import meta_config


def fit_mass(data, column='B_M', second_storage=None):

    if not (isinstance(column, str) or len(column) == 1):
        raise ValueError("Fitting to several columns " + str(column) + " not supported.")
    data_array, _t1, _t2 = data.make_dataset(second_storage, columns=column)
    del _t1, _t2
    print data_array
    data_array = np.array([i[0] for i in data_array.as_matrix()])
    data_array.dtype = [('x', np.float64)]
#    print data_array
    tree1 = array2tree(data_array, "x")
#    tree1.Scan()

    # double crystalball variables
    x = RooRealVar("x", "x variable", 5000, 6000)
    data_np = RooDataSet("data_np", "Data generated by numpy", RooArgSet(x), RooFit.Import(tree1))
    mean = RooRealVar("mean", "Mean of Double CB PDF", 5366, 5000, 6000)
    sigma = RooRealVar("sigma", "Sigma of Double CB PDF", 2, -100, 100)
    alpha_0 = RooRealVar("alpha_0", "alpha_0 of one side", 1., 0, 5)
    alpha_1 = RooRealVar("alpha_1", "alpha_1 of other side", -1, -5, 0.)
    lambda_0 = RooRealVar("lambda_0", "Exponent of one side", 3, 0.0, 5)
    lambda_1 = RooRealVar("lambda_1", "Exponent of other side", 3, 0.0, 5)

    # pdf construction
    frac = RooRealVar("frac", "Fraction of crystal ball pdfs", 0.5)

    crystalball1 = RooCBShape("crystallball1", "First CrystalBall PDF", x,
                              mean, sigma, alpha_0, lambda_0)
    crystalball2 = RooCBShape("crystallball2", "Second CrystalBall PDF", x,
                              mean, sigma, alpha_1, lambda_1)
    doubleCB = RooAddPdf("doubleCB", "Double CrystalBall PDF",
                         crystalball1, crystalball2, frac)

    lambda_exp = RooRealVar("lambda_exp", "lambda exp pdf bkg", -0.1, -100, 100.)

    bkg_pdf = RooExponential("bkg_pdf", "Background PDF exp", x, lambda_exp)

    nsig = RooRealVar("nsig", "Number of signals events", 10000, 0, 1000000)
    nbkg = RooRealVar("nbkg", "Number of background events", 10000, 0, 1000000)

    comb_pdf = RooAddPdf("comb_pdf", "Combined DoubleCB and bkg PDF",
                         RooArgList(doubleCB, bkg_pdf), RooArgList(nsig, nbkg))

    # create test dataset
    mean_gauss = RooRealVar("mean_gauss", "Mean of Gaussian", 5553, -10000, 10000)
    sigma_gauss = RooRealVar("sigma_gauss", "Width of Gaussian", 20, 0.0001, 300)
    gauss1 = RooGaussian("gauss1", "Gaussian test dist", x, mean_gauss, sigma_gauss)
    lambda_data = RooRealVar("lambda_data", "lambda exp data", -.002)
    exp_data = RooExponential("exp_data", "data example exp", x, lambda_data)
    frac_data = RooRealVar("frac_data", "Fraction PDF of data", 0.15)

    data_pdf = RooAddPdf("data_pdf", "Data PDF", gauss1, exp_data, frac_data)
    data = data_pdf.generate(RooArgSet(x), 30000)
    #HACK
#    print data.printValue()
    data = data_np
    print data

#    data.printValue()
    xframe = x.frame()
    data.plotOn(xframe)
    xframe.Draw()

#    comb_pdf.fitTo(data, RooFit.Extended(ROOT.kTRUE), RooFit.NumCPU(meta_config.get_n_cpu()))
    # HACK to get 8 cores in testing
    comb_pdf.fitTo(data, RooFit.Extended(ROOT.kTRUE), RooFit.NumCPU(8))
    comb_pdf.plotOn(xframe)
    xframe.Draw()

    params = comb_pdf.getVariables()
    params.Print("v")


#        fitter.makeDoubleCB(((*it_modes)+"_"+(*it_year)+"_"+(*it_trig)+"_"+(*it_nBrem)+"_"+(*it_bin)+"_pdf").c_str(),
#                      //start   min     max
#                        5366,   5356,   5376,   // mu; most probable value, resonance mass
#                        8,      0,      25,     // sigma; resolution
#                        1,      0,      5,      // alpha_0; transition point
#                        -1,     -5,     0,      // alpha_0 other side;
#                        1,      0,      5,      // exponent;
#                        1,      0,      5,      // exponent other side;
#                        0.5);
#     }


if __name__ == '__main__':
    data = "empty"
#    data = RooDataSet("data", )
    from raredecay.tools.data_storage import HEPDataStorage
#    import numpy as np
    import pandas as pd

    data = HEPDataStorage(pd.DataFrame(np.random.normal(loc=5400, scale=50, size=(10000, 2)), columns=['x', 'y']))
    fit_mass(data=data, column='x')
#    mean = RooRealVar("mean", "Mean of Gaussian", 5653, -10000, 10000)
#    sigma = RooRealVar("sigma", "Width of Gaussian", 2, 0.0001, 30)
#    x = RooRealVar("x", "x", -20, 20)
#    gauss1 = RooGaussian("gauss1", "Gaussian test dist", x, mean, sigma)
#    xframe = x.frame()
#
#    data = gauss1.generate(RooArgSet(x), 10000)
#    gauss1.fitTo(data)
#    data.plotOn(xframe)
#    gauss1.plotOn(xframe)
#    xframe.Draw()
#    data = RooDataSet("data", "Gaussian generated data-set", gauss1.generate(x, 10000))